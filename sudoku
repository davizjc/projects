#include <iostream>
 
using namespace std;
 
#define N 9
 
bool FindUnassignedLocation(int grid[N][N], int& row, int& col);
bool safe(int grid[N][N], int row, int col, int num);
 
bool solve(int grid[N][N])
{
    int row, col;
    if (!FindUnassignedLocation(grid, row, col)) {// If there is no unassigned location,
        return true;
    }
    for (int num = 1; num <= 9; num++)
    {
        if (safe(grid, row, col, num))
        {
            grid[row][col] = num;
            if (solve(grid))
                return true;
            grid[row][col] = 0;
        }
    }
    return false; //return false until no more unassign
}
 
bool FindUnassignedLocation(int grid[N][N],int& row, int& col)
{
    for (row = 0; row < N; row++)
        for (col = 0; col < N; col++)
            if (grid[row][col] == 0)
                return true;
    return false;
}
 
bool samerow(int grid[N][N], int row, int num)
{
    for (int col = 0; col < N; col++)
        if (grid[row][col] == num)
            return true;
    return false;
}
 
bool samecol(int grid[N][N], int col, int num)
{
    for (int row = 0; row < N; row++)
        if (grid[row][col] == num)
            return true;
    return false;
}
 
bool samebox(int grid[N][N], int boxStartRow,int boxStartCol, int num)
{
    for (int row = 0; row < 3; row++)
        for (int col = 0; col < 3; col++)
            if (grid[row + boxStartRow][col + boxStartCol] == num)
                return true;
    return false;
}
 
bool safe(int grid[N][N], int row,int col, int num)
{
    return !samerow(grid, row, num)
           && !samecol(grid, col, num)
           && !samebox(grid, row - row % 3,col - col % 3, num)
           && grid[row][col] == 0;
}
 

void print(int grid[N][N])
{
    for (int row = 0; row < N; row++)
    {
        for (int col = 0; col < N; col++)
            cout << grid[row][col] << " ";
        cout << endl;
    }
}
 
// Driver Code
int main()
{
    // 0 = unassigned cells
    int grid[N][N] = { { 9, 0, 0, 2, 0, 0, 7, 0, 6 },
                       { 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                       { 0, 1, 0, 0, 0, 0, 0, 0, 8 },
                       { 0, 0, 6, 0, 0, 0, 0, 0, 9 },
                       { 0, 7, 0, 0, 0, 0, 4, 3, 0 },
                       { 0, 0, 3, 9, 2, 0, 0, 0, 1 },
                       { 5, 3, 7, 6, 0, 4, 0, 0, 0 },
                       { 0, 0, 0, 1, 0, 0, 9, 0, 0 },
                       { 0, 0, 0, 0, 0, 0, 0, 5, 0 } };
    if (solve(grid) == true)
        print(grid);
    else
        cout << "No solution exists";
 
    return 0;
}
